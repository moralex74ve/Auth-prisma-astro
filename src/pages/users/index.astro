---
export const prerender = false;
import Layout from "../../layouts/Layout.astro";
import {actions} from "astro:actions";
import { prisma } from "../../db";

// Verificar sesión

const session = Astro.cookies.get("session");
if (!session) {
  return Astro.redirect("/login");
}

// Verificar rol de administrador
const userCookie = Astro.cookies.get("user");
if (!userCookie) {
  // Si no hay cookie de usuario, no se puede verificar el rol, denegar acceso.
  return Astro.redirect("/dashboard?error=unauthorized");
}

const user = JSON.parse(userCookie.value);
if (user.rol !== 'admin') {
  // Si el rol no es admin, denegar acceso.
  return Astro.redirect("/dashboard?error=unauthorized");
}


// Obtener todos los usuarios
const users = await prisma.usuarios.findMany();

// Obtener resultados de las acciones
const createResult = Astro.getActionResult(actions.createUser);
const updateResult = Astro.getActionResult(actions.updateUser);
const deleteResult = Astro.getActionResult(actions.deleteUser);
---

<Layout>
  <main class="container mx-auto bg-gray-200 w-full">
    <div class="min-w-full px-4 py-4 sm:px-4 sm:py-8">
      <h1 class="text-3xl text-center font-bold mb-8">Gestión de Usuarios</h1>
      
      <!-- Mensajes de resultado -->
      {createResult?.data?.body.message && (
        <div 
          id="createMessage"
          class={`p-4 mb-4 rounded ${createResult.data.success ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}
          data-create-result={JSON.stringify(createResult.data)}
        >
          {createResult.data.body.message}
        </div>
      )}
      {updateResult?.data?.body.message && (
        <div 
          id="updateMessage"
          class={`p-4 mb-4 rounded ${updateResult.data.success ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}
          data-create-result={JSON.stringify(updateResult.data)}
        >
          {updateResult.data.body.message}
        </div>
      )}
      {deleteResult?.data?.message && (
        <div 
          id="deleteMessage"
          class={`p-4 mb-4 rounded ${deleteResult.data.success ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}
          data-create-result={JSON.stringify(deleteResult.data)}
        >
          {deleteResult.data.message}
        </div>
      )}

      <div class="flex flex-col lg:flex-row gap-4 max-w-[1200px] mx-auto">
        <!-- Lista de Usuarios (2/3 del viewport) -->
        <div class="w-full lg:w-2/3 bg-white p-3 sm:p-6 rounded-lg shadow-md order-2 lg:order-1">
          <h2 class="text-2xl text-center font-semibold mb-4">Usuarios Existentes</h2>
          
          <!-- Filtro de búsqueda -->
          <div class="mb-4 flex gap-4">
            <div class="flex-1">
              <input type="text" 
                     id="searchInput" 
                     placeholder="Buscar por nombre, correo o rol..." 
                     class="w-full px-4 py-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              />
            </div>
            <select id="filterField" 
                    class="px-4 py-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
              <option value="all">Todos los campos</option>
              <option value="nombre">Nombre</option>
              <option value="correo">Correo</option>
              <option value="rol">Rol</option>
            </select>
          </div>

          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Correo</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rol</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                {users.map((user) => (
                  <tr>
                    <td class="px-6 py-4 whitespace-nowrap">{user.nombre}</td>
                    <td class="px-6 py-4 whitespace-nowrap">{user.correo}</td>
                    <td class="px-6 py-4 whitespace-nowrap">{user.rol}</td>
                    <td class="px-6 py-4 whitespace-nowrap space-x-2">
                      <button onclick={`editUser(${JSON.stringify(user)})`}
                              class="bg-yellow-500 text-white p-2 rounded-md hover:bg-yellow-600 inline-flex items-center justify-center group relative"
                              title="Editar usuario">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
                        </svg>
                        <span class="sr-only">Editar</span>
                      </button>
                      <form action={actions.deleteUser} method="POST" class="inline" id="deleteForm" onsubmit="return confirmDelete()">
                        <input type="hidden" name="id" value={user.id} />
                        <button type="submit" 
                                class="bg-red-500 text-white p-2 rounded-md hover:bg-red-600 inline-flex items-center justify-center"
                                title="Eliminar usuario">
                          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                          </svg>
                          <span class="sr-only">Eliminar</span>
                        </button>
                      </form>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        <!-- Formulario de Crear Usuario (1/3 del viewport) -->
        <div class="w-full lg:w-1/3 bg-white p-3 sm:p-6 rounded-lg shadow-md order-1 lg:order-2 lg:sticky lg:top-4">
          <h2 class="text-2xl text-center font-semibold mb-4">Crear Nuevo Usuario</h2>
          <form action={actions.createUser} method="POST" class="space-y-4" transition:persist id="createUserForm">
            <div class="grid grid-cols-1 md:grid-cols-1 gap-2">
              <div>
                <label for="nombre" class="block text-sm font-medium text-gray-700">Nombre</label>
                <input type="text" name="nombre" id="nombre" required 
                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
              </div>
              <div>
                <label for="correo" class="block text-sm font-medium text-gray-700">Correo</label>
                <input type="email" name="correo" id="correo" required 
                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
              </div>
              <div>
                <label for="clave" class="block text-sm font-medium text-gray-700">Contraseña</label>
                <input type="password" name="clave" id="clave" required 
                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
              </div>
              <div>
                <label for="rol" class="block text-sm font-medium text-gray-700">Rol</label>
                <select name="rol" id="rol" required 
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                  <option value="usuario">Usuario</option>
                  <option value="admin">Administrador</option>
                </select>
              </div>
            </div>
            <button type="submit" 
                    class="w-full mt-4 bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
              Crear Usuario
            </button>
          </form>
        </div>
      </div>
    </div>

    <!-- Modal de Edición -->
    <div id="editModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <h3 class="text-lg font-medium leading-6 text-gray-900 mb-4">Editar Usuario</h3>
        <form action={actions.updateUser} method="POST" id="editForm" class="space-y-4" transition:persist>
          <input type="hidden" name="id" id="editId" />
          <div>
            <label for="editNombre" class="block text-sm font-medium text-gray-700">Nombre</label>
            <input type="text" name="nombre" id="editNombre" required 
                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
          </div>
          <div>
            <label for="editCorreo" class="block text-sm font-medium text-gray-700">Correo</label>
            <input type="email" name="correo" id="editCorreo" required 
                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
          </div>
          <div>
            <label for="editClave" class="block text-sm font-medium text-gray-700">Nueva Contraseña (opcional)</label>
            <input type="password" name="clave" id="editClave" 
                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
          </div>
          <div>
            <label for="editRol" class="block text-sm font-medium text-gray-700">Rol</label>
            <select name="rol" id="editRol" required 
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
              <option value="usuario">Usuario</option>
              <option value="admin">Administrador</option>
            </select>
            <br>
            <label>
              Activo:
              <input type="checkbox" id="editIsActive" name="activo" checked=true />
            </label>
            <h1 id="miActive"> </h1> 

          </div>
          <div class="flex justify-end space-x-2">
            <button type="button" onclick="closeEditModal()"
                    class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600">
              Cancelar
            </button>
            <button type="submit"
                    class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700">
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </main>
</Layout>

<script is:inline>
  function editUser(user) {
    const modal = document.getElementById('editModal');
    const form = document.getElementById('editForm');
    
    // Llenar el formulario con los datos del usuario
    document.getElementById('editId').value = user.id;
    document.getElementById('editNombre').value = user.nombre;
    document.getElementById('editCorreo').value = user.correo;
    document.getElementById('editRol').value = user.rol;
    document.getElementById('editIsActive').checked = user.activo; // Reactivar esta línea
    document.getElementById('miActive').textContent = document.getElementById('editIsActive').value
    
    // Mostrar el modal
    modal.classList.remove('hidden');
  }

  function closeEditModal() {
    const modal = document.getElementById('editModal');
    modal.classList.add('hidden');
  }

  function confirmDelete() {
    return confirm("¿Está seguro que desea eliminar este usuario?\n Esta acción no se puede deshacer.");
  }

  // Cerrar el modal si se hace clic fuera de él
  window.onclick = function(event) {
    const modal = document.getElementById('editModal');
    if (event.target == modal) {
      closeEditModal();
    }
  }

  // Función para eliminar mensajes después de 3 segundos
  function removeMessages() {
    const messages = ['createMessage', 'updateMessage', 'deleteMessage'];
    messages.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        setTimeout(() => {
          element.style.opacity = '0';
          element.style.transition = 'opacity 0.5s ease';
          setTimeout(() => {
            element.remove();
          }, 500);
        }, 3000);
      }
    });
  }

  // Función para filtrar usuarios
  function filterUsers() {
    const searchInput = document.getElementById('searchInput');
    const filterField = document.getElementById('filterField');
    const rows = document.querySelectorAll('tbody tr');
    
    const searchTerm = searchInput.value.toLowerCase();
    const filterValue = filterField.value;

    rows.forEach(row => {
      const nombre = row.children[0].textContent.toLowerCase();
      const correo = row.children[1].textContent.toLowerCase();
      const rol = row.children[2].textContent.toLowerCase();
      
      let match = false;
      
      if (filterValue === 'all') {
        match = nombre.includes(searchTerm) || 
                correo.includes(searchTerm) || 
                rol.includes(searchTerm);
      } else {
        const fieldIndex = filterValue === 'nombre' ? 0 : 
                          filterValue === 'correo' ? 1 : 
                          filterValue === 'rol' ? 2 : 0;
        match = row.children[fieldIndex].textContent.toLowerCase().includes(searchTerm);
      }
      
      row.style.display = match ? '' : 'none';
    });
  }

  // Agregar event listeners para el filtrado
  document.addEventListener('astro:page-load', () => {
    const searchInput = document.getElementById('searchInput');
    const filterField = document.getElementById('filterField');
    
    if (searchInput && filterField) {
      searchInput.addEventListener('input', filterUsers);
      filterField.addEventListener('change', filterUsers);
    }
    
    removeMessages();
    const createResult = document.querySelector('[data-create-result]')?.dataset.createResult;
    if (createResult) {
      const result = JSON.parse(createResult);
      if (result.success) {
        document.getElementById('createUserForm')?.reset();
      }
    }else{
      limpiarFormulario();
    }
    
    const updateResult = document.querySelector('[data-update-result]')?.dataset.updateResult;
    if (updateResult) {
      const result = JSON.parse(updateResult);
      if (result.success) {
        document.getElementById('editForm')?.reset();
      }
    }
    
    const deleteResult = document.querySelector('[data-delete-result]')?.dataset.deleteResult;
    if (deleteResult) {
      const result = JSON.parse(deleteResult);
      if (result.success) {
        document.getElementById('deleteForm')?.reset();
      }
    }
  });

  function limpiarFormulario() {
    document.getElementById('nombre').value = '';
    document.getElementById('correo').value = '';
    document.getElementById('clave').value = '';
  }

  
</script>